<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nxp_lpc845_bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nxp_lpc845_bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Oct 15 18:24:11 2020
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fw_usart_init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[55]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">NMI_Handler</a><BR>
 <LI><a href="#[56]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">HardFault_Handler</a><BR>
 <LI><a href="#[57]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">SVC_Handler</a><BR>
 <LI><a href="#[58]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">PendSV_Handler</a><BR>
 <LI><a href="#[59]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">ADC0_OVR_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0_OVR_DriverIRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0_OVR_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[6d]">ADC0_OVR_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[18]">ADC0_SEQA_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[6a]">ADC0_SEQA_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[19]">ADC0_SEQB_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[6b]">ADC0_SEQB_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[1a]">ADC0_THCMP_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[6c]">ADC0_THCMP_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[15]">BOD_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[67]">BOD_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[13]">CMP_CAPT_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[65]">CMP_CAPT_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[1f]">CTIMER0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[71]">CTIMER0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[a]">DAC0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[5c]">DAC0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[1c]">DMA0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[6e]">DMA0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[16]">FLASH_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[68]">FLASH_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[56]">HardFault_Handler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[10]">I2C0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[62]">I2C0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[f]">I2C1_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[61]">I2C1_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[1d]">I2C2_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[6f]">I2C2_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[1e]">I2C3_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[70]">I2C3_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[12]">MRT0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[64]">MRT0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[55]">NMI_Handler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[20]">PIN_INT0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[72]">PIN_INT0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[21]">PIN_INT1_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[73]">PIN_INT1_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[22]">PIN_INT2_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[74]">PIN_INT2_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[23]">PIN_INT3_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[75]">PIN_INT3_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[24]">PIN_INT4_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[76]">PIN_INT4_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[25]">PIN_INT5_DAC1_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[77]">PIN_INT5_DAC1_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[26]">PIN_INT6_USART3_DriverIRQHandler</a> from fsl_usart.o(i.PIN_INT6_USART3_DriverIRQHandler) referenced from startup_lpc845.o(.text)
 <LI><a href="#[78]">PIN_INT6_USART3_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[27]">PIN_INT7_USART4_DriverIRQHandler</a> from fsl_usart.o(i.PIN_INT7_USART4_DriverIRQHandler) referenced from startup_lpc845.o(.text)
 <LI><a href="#[79]">PIN_INT7_USART4_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[58]">PendSV_Handler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[e]">Reserved22_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[60]">Reserved22_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[54]">Reset_Handler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[11]">SCT0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[63]">SCT0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[8]">SPI0_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[5a]">SPI0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[9]">SPI1_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[5b]">SPI1_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[57]">SVC_Handler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[59]">SysTick_Handler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[6]">SystemInit</a> from system_lpc845.o(i.SystemInit) referenced from startup_lpc845.o(.text)
 <LI><a href="#[b]">USART0_DriverIRQHandler</a> from fsl_usart.o(i.USART0_DriverIRQHandler) referenced from startup_lpc845.o(.text)
 <LI><a href="#[5d]">USART0_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[c]">USART1_DriverIRQHandler</a> from fsl_usart.o(i.USART1_DriverIRQHandler) referenced from startup_lpc845.o(.text)
 <LI><a href="#[5e]">USART1_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[d]">USART2_DriverIRQHandler</a> from fsl_usart.o(i.USART2_DriverIRQHandler) referenced from startup_lpc845.o(.text)
 <LI><a href="#[5f]">USART2_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[28]">USART_TransferHandleIRQ</a> from fsl_usart.o(i.USART_TransferHandleIRQ) referenced from fsl_usart.o(i.USART_TransferCreateHandle)
 <LI><a href="#[14]">WDT_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[66]">WDT_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[17]">WKT_DriverIRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(.text)
 <LI><a href="#[69]">WKT_IRQHandler</a> from startup_lpc845.o(.text) referenced from startup_lpc845.o(RESET)
 <LI><a href="#[7a]">__main</a> from __main.o(!!!main) referenced from startup_lpc845.o(.text)
 <LI><a href="#[2b]">fw_io_deinit</a> from fw_io.o(i.fw_io_deinit) referenced from fw_io.o(.constdata)
 <LI><a href="#[44]">fw_io_entity_getDir</a> from fw_io.o(i.fw_io_entity_getDir) referenced from fw_io.o(.constdata)
 <LI><a href="#[43]">fw_io_entity_getValue</a> from fw_io.o(i.fw_io_entity_getValue) referenced from fw_io.o(.constdata)
 <LI><a href="#[40]">fw_io_entity_setDir</a> from fw_io.o(i.fw_io_entity_setDir) referenced from fw_io.o(.constdata)
 <LI><a href="#[3d]">fw_io_entity_setHigh</a> from fw_io.o(i.fw_io_entity_setHigh) referenced from fw_io.o(.constdata)
 <LI><a href="#[41]">fw_io_entity_setInput</a> from fw_io.o(i.fw_io_entity_setInput) referenced from fw_io.o(.constdata)
 <LI><a href="#[3e]">fw_io_entity_setLow</a> from fw_io.o(i.fw_io_entity_setLow) referenced from fw_io.o(.constdata)
 <LI><a href="#[42]">fw_io_entity_setOutput</a> from fw_io.o(i.fw_io_entity_setOutput) referenced from fw_io.o(.constdata)
 <LI><a href="#[3f]">fw_io_entity_setToggle</a> from fw_io.o(i.fw_io_entity_setToggle) referenced from fw_io.o(.constdata)
 <LI><a href="#[3c]">fw_io_entity_setValue</a> from fw_io.o(i.fw_io_entity_setValue) referenced from fw_io.o(.constdata)
 <LI><a href="#[2c]">fw_io_getEntity</a> from fw_io.o(i.fw_io_getEntity) referenced from fw_io.o(.constdata)
 <LI><a href="#[34]">fw_io_getValue</a> from fw_io.o(i.fw_io_getValue) referenced 2 times from fw_io.o(.constdata)
 <LI><a href="#[2a]">fw_io_init</a> from fw_io.o(i.fw_io_init) referenced from fw_io.o(.constdata)
 <LI><a href="#[37]">fw_io_port_clear</a> from fw_io.o(i.fw_io_port_clear) referenced from fw_io.o(.constdata)
 <LI><a href="#[39]">fw_io_port_dir</a> from fw_io.o(i.fw_io_port_dir) referenced from fw_io.o(.constdata)
 <LI><a href="#[3a]">fw_io_port_dirClear</a> from fw_io.o(i.fw_io_port_dirClear) referenced from fw_io.o(.constdata)
 <LI><a href="#[3b]">fw_io_port_dirSet</a> from fw_io.o(i.fw_io_port_dirSet) referenced from fw_io.o(.constdata)
 <LI><a href="#[35]">fw_io_port_read</a> from fw_io.o(i.fw_io_port_read) referenced from fw_io.o(.constdata)
 <LI><a href="#[36]">fw_io_port_set</a> from fw_io.o(i.fw_io_port_set) referenced from fw_io.o(.constdata)
 <LI><a href="#[38]">fw_io_port_toggle</a> from fw_io.o(i.fw_io_port_toggle) referenced from fw_io.o(.constdata)
 <LI><a href="#[31]">fw_io_setDir</a> from fw_io.o(i.fw_io_setDir) referenced from fw_io.o(.constdata)
 <LI><a href="#[2e]">fw_io_setHigh</a> from fw_io.o(i.fw_io_setHigh) referenced from fw_io.o(.constdata)
 <LI><a href="#[32]">fw_io_setInput</a> from fw_io.o(i.fw_io_setInput) referenced from fw_io.o(.constdata)
 <LI><a href="#[2f]">fw_io_setLow</a> from fw_io.o(i.fw_io_setLow) referenced from fw_io.o(.constdata)
 <LI><a href="#[33]">fw_io_setOutput</a> from fw_io.o(i.fw_io_setOutput) referenced from fw_io.o(.constdata)
 <LI><a href="#[30]">fw_io_setToggle</a> from fw_io.o(i.fw_io_setToggle) referenced from fw_io.o(.constdata)
 <LI><a href="#[2d]">fw_io_setValue</a> from fw_io.o(i.fw_io_setValue) referenced from fw_io.o(.constdata)
 <LI><a href="#[4a]">fw_usart_abortReceive</a> from fw_usart.o(i.fw_usart_abortReceive) referenced from fw_usart.o(.constdata)
 <LI><a href="#[4b]">fw_usart_abortSend</a> from fw_usart.o(i.fw_usart_abortSend) referenced from fw_usart.o(.constdata)
 <LI><a href="#[29]">fw_usart_callback_handle</a> from fw_usart.o(i.fw_usart_callback_handle) referenced from fw_usart.o(i.fw_usart_init)
 <LI><a href="#[46]">fw_usart_deinit</a> from fw_usart.o(i.fw_usart_deinit) referenced from fw_usart.o(.constdata)
 <LI><a href="#[51]">fw_usart_entity_abortReceive</a> from fw_usart.o(i.fw_usart_entity_abortReceive) referenced from fw_usart.o(.constdata)
 <LI><a href="#[52]">fw_usart_entity_abortSend</a> from fw_usart.o(i.fw_usart_entity_abortSend) referenced from fw_usart.o(.constdata)
 <LI><a href="#[4f]">fw_usart_entity_reciver</a> from fw_usart.o(i.fw_usart_entity_reciver) referenced from fw_usart.o(.constdata)
 <LI><a href="#[50]">fw_usart_entity_send</a> from fw_usart.o(i.fw_usart_entity_send) referenced from fw_usart.o(.constdata)
 <LI><a href="#[53]">fw_usart_entity_setBaudrate</a> from fw_usart.o(i.fw_usart_entity_setBaudrate) referenced from fw_usart.o(.constdata)
 <LI><a href="#[47]">fw_usart_getEntity</a> from fw_usart.o(i.fw_usart_getEntity) referenced from fw_usart.o(.constdata)
 <LI><a href="#[45]">fw_usart_init</a> from fw_usart.o(i.fw_usart_init) referenced from fw_usart.o(.constdata)
 <LI><a href="#[48]">fw_usart_reciver</a> from fw_usart.o(i.fw_usart_reciver) referenced from fw_usart.o(.constdata)
 <LI><a href="#[49]">fw_usart_send</a> from fw_usart.o(i.fw_usart_send) referenced from fw_usart.o(.constdata)
 <LI><a href="#[4e]">fw_usart_setting_ringBufferDisable</a> from fw_usart.o(i.fw_usart_setting_ringBufferDisable) referenced from fw_usart.o(.constdata)
 <LI><a href="#[4d]">fw_usart_setting_ringBufferEnable</a> from fw_usart.o(i.fw_usart_setting_ringBufferEnable) referenced from fw_usart.o(.constdata)
 <LI><a href="#[4c]">fw_usart_setting_setBaudrate</a> from fw_usart.o(i.fw_usart_setting_setBaudrate) referenced from fw_usart.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[80]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[cb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[da]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[db]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[de]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[df]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[7f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[81]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; start &rArr; fw_chip_init &rArr; fw_chip_initCoreClock &rArr; CLOCK_SetMainClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ea]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[92]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[84]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[eb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[86]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[95]"></a>BootJumpASM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bootloader.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootJump
</UL>

<P><STRONG><a name="[54]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DAC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Reserved22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CMP_CAPT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>WKT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ADC0_SEQA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ADC0_SEQB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ADC0_OVR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PIN_INT5_DAC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PIN_INT6_USART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PIN_INT7_USART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0_OVR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_OVR_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_OVR_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>ADC0_SEQA_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>ADC0_SEQB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0_THCMP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>CMP_CAPT_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>DAC0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>I2C3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>PIN_INT5_DAC1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>Reserved22_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>WDT_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>WKT_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc845.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRG1ClkFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRG0ClkFreq
</UL>

<P><STRONG><a name="[ec]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwInfo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_iocon_pinMuxSet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferHandleIRQ
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetInstance
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferIsRxRingBufferFull
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_UpdateClkSrc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferStopRingBuffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferStartRingBuffer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferSendNonBlocking
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferAbortSend
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferAbortReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Deinit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWM_SetMovablePinSelect
</UL>

<P><STRONG><a name="[8b]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[8a]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_deinit
</UL>

<P><STRONG><a name="[ed]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[89]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[f2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[8e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[83]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[90]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[93]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[94]"></a>BootJump</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bootloader.o(i.BootJump))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootJumpASM
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[96]"></a>CLOCK_GetFRG0ClkFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFRG0ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetFRG0ClkFreq &rArr; CLOCK_GetFRGInputClkFreq &rArr; CLOCK_GetMainClkFreq &rArr; CLOCK_GetSystemPLLFreq &rArr; CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[99]"></a>CLOCK_GetFRG1ClkFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFRG1ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetFRG1ClkFreq &rArr; CLOCK_GetFRGInputClkFreq &rArr; CLOCK_GetMainClkFreq &rArr; CLOCK_GetSystemPLLFreq &rArr; CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_GetFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFRG1ClkFreq &rArr; CLOCK_GetFRGInputClkFreq &rArr; CLOCK_GetMainClkFreq &rArr; CLOCK_GetSystemPLLFreq &rArr; CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMainClkFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRG1ClkFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRG0ClkFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_setBaudrate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
</UL>

<P><STRONG><a name="[9b]"></a>CLOCK_GetFroFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFroFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLInClockRate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMainClkFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClkFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_GetMainClkFreq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetMainClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetMainClkFreq &rArr; CLOCK_GetSystemPLLFreq &rArr; CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClkFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a0]"></a>CLOCK_GetSystemPLLInClockRate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetSystemPLLInClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLFreq
</UL>

<P><STRONG><a name="[b9]"></a>CLOCK_InitSysOsc</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitSysOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitSysOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_initCoreClock
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_SetFroOutClkSrc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetFroOutClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetFroOutClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_UpdateClkSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_initCoreClock
</UL>

<P><STRONG><a name="[a3]"></a>CLOCK_SetMainClkSrc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetMainClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetMainClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_UpdateClkSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_initCoreClock
</UL>

<P><STRONG><a name="[26]"></a>PIN_INT6_USART3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(i.PIN_INT6_USART3_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>PIN_INT7_USART4_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(i.PIN_INT7_USART4_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>RESET_PeripheralReset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_reset.o(i.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RESET_PeripheralReset &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a5]"></a>SWM_SetMovablePinSelect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_swm.o(i.SWM_SetMovablePinSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SWM_SetMovablePinSelect &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setPin
</UL>

<P><STRONG><a name="[6]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_lpc845.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_lpc845.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b]"></a>USART0_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(i.USART0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>USART1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(i.USART1_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>USART2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(i.USART2_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc845.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>USART_Deinit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = USART_Deinit &rArr; USART_GetInstance &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_deinit
</UL>

<P><STRONG><a name="[a9]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_GetDefaultConfig &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
</UL>

<P><STRONG><a name="[a8]"></a>USART_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_GetInstance &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Deinit
</UL>

<P><STRONG><a name="[aa]"></a>USART_Init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, fsl_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetInstance
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableTx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
</UL>

<P><STRONG><a name="[ab]"></a>USART_SetBaudRate</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, fsl_usart.o(i.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USART_SetBaudRate &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_setBaudrate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[ad]"></a>USART_TransferAbortReceive</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_TransferAbortReceive &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortReceive
</UL>

<P><STRONG><a name="[ae]"></a>USART_TransferAbortSend</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_TransferAbortSend &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableTx
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortSend
</UL>

<P><STRONG><a name="[af]"></a>USART_TransferCreateHandle</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = USART_TransferCreateHandle &rArr; USART_GetInstance &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
</UL>

<P><STRONG><a name="[b1]"></a>USART_TransferGetRxRingBufferLength</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_TransferGetRxRingBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_TransferGetRxRingBufferLength &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferIsRxRingBufferFull
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
</UL>

<P><STRONG><a name="[28]"></a>USART_TransferHandleIRQ</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, fsl_usart.o(i.USART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = USART_TransferHandleIRQ &rArr; USART_TransferIsRxRingBufferFull &rArr; USART_TransferGetRxRingBufferLength &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferIsRxRingBufferFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_usart.o(i.USART_TransferCreateHandle)
</UL>
<P><STRONG><a name="[b3]"></a>USART_TransferReceiveNonBlocking</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, fsl_usart.o(i.USART_TransferReceiveNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USART_TransferReceiveNonBlocking &rArr; USART_TransferGetRxRingBufferLength &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_reciver
</UL>

<P><STRONG><a name="[b4]"></a>USART_TransferSendNonBlocking</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_TransferSendNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = USART_TransferSendNonBlocking &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_send
</UL>

<P><STRONG><a name="[b5]"></a>USART_TransferStartRingBuffer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_TransferStartRingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_TransferStartRingBuffer &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_ringBufferEnable
</UL>

<P><STRONG><a name="[b6]"></a>USART_TransferStopRingBuffer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_TransferStopRingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USART_TransferStopRingBuffer &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_ringBufferDisable
</UL>

<P><STRONG><a name="[9e]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system_lpc845.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c3]"></a>delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loop.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[b7]"></a>fw_chip_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fw_chip.o(i.fw_chip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = fw_chip_init &rArr; fw_chip_initCoreClock &rArr; CLOCK_SetMainClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_initCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[b8]"></a>fw_chip_initCoreClock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fw_chip.o(i.fw_chip_initCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_chip_initCoreClock &rArr; CLOCK_SetMainClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMainClkSrc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFroOutClkSrc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_init
</UL>

<P><STRONG><a name="[c2]"></a>loop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loop.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = loop
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootJump
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = main &rArr; start &rArr; fw_chip_init &rArr; fw_chip_initCoreClock &rArr; CLOCK_SetMainClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c5]"></a>periph_io_startup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, periph_io.o(i.periph_io_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = periph_io_startup &rArr; periph_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[c4]"></a>start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, start.o(i.start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = start &rArr; fw_chip_init &rArr; fw_chip_initCoreClock &rArr; CLOCK_SetMainClkSrc &rArr; CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_io_startup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>start_hw</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, start.o(i.start_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c6]"></a>periph_io_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, periph_io.o(i.periph_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = periph_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_io_startup
</UL>

<P><STRONG><a name="[bb]"></a>CLOCK_DisableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fw_io.o(i.CLOCK_DisableClock))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_deinit
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fw_io.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_init
</UL>

<P><STRONG><a name="[2b]"></a>fw_io_deinit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fw_io.o(i.fw_io_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fw_io_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>fw_io_entity_getDir</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, fw_io.o(i.fw_io_entity_getDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fw_io_entity_getDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>fw_io_entity_getValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_getValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fw_io_entity_getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>fw_io_entity_setDir</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setDir &rArr; fw_io_setDir &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>fw_io_entity_setHigh</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setHigh &rArr; fw_io_setHigh &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setHigh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>fw_io_entity_setInput</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setInput &rArr; fw_io_setInput &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>fw_io_entity_setLow</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setLow &rArr; fw_io_setLow &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setLow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>fw_io_entity_setOutput</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setOutput &rArr; fw_io_setOutput &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>fw_io_entity_setToggle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setToggle &rArr; fw_io_setToggle &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>fw_io_entity_setValue</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_entity_setValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_io_entity_setValue &rArr; fw_io_setValue &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>fw_io_getBase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_io.o(i.fw_io_getBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setValue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setToggle
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setOutput
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setLow
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setInput
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setHigh
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_setDir
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_toggle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_set
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_dirSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_dirClear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_dir
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_port_clear
</UL>

<P><STRONG><a name="[2c]"></a>fw_io_getEntity</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, fw_io.o(i.fw_io_getEntity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fw_io_getEntity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>fw_io_getValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fw_io.o(i.fw_io_getValue))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_getValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>fw_io_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fw_io.o(i.fw_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = fw_io_init &rArr; RESET_PeripheralReset &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>fw_io_port_clear</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_port_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_port_clear &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>fw_io_port_dir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_port_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_port_dir &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>fw_io_port_dirClear</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_port_dirClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_port_dirClear &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>fw_io_port_dirSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_port_dirSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_port_dirSet &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>fw_io_port_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fw_io.o(i.fw_io_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = fw_io_port_read &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>fw_io_port_set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_port_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_port_set &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>fw_io_port_toggle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_port_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_port_toggle &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>fw_io_setDir</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setDir &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>fw_io_setHigh</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setHigh &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setHigh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>fw_io_setInput</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setInput &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>fw_io_setLow</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setLow &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setLow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>fw_io_setOutput</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setOutput &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>fw_io_setToggle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setToggle &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>fw_io_setValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fw_io.o(i.fw_io_setValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_io_setValue &rArr; fw_io_getBase &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_getBase
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_io_entity_setValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_io.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>fw_chip_iocon_pinMuxSet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fw_usart.o(i.fw_chip_iocon_pinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fw_chip_iocon_pinMuxSet &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setPin
</UL>

<P><STRONG><a name="[4a]"></a>fw_usart_abortReceive</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_abortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_usart_abortReceive &rArr; fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferAbortReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_entity_abortReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>fw_usart_abortSend</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_abortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_usart_abortSend &rArr; fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferAbortSend
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_entity_abortSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>fw_usart_callback_handle</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_callback_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fw_usart_callback_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(i.fw_usart_init)
</UL>
<P><STRONG><a name="[46]"></a>fw_usart_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_usart.o(i.fw_usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_usart_deinit &rArr; USART_Deinit &rArr; USART_GetInstance &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>fw_usart_entity_abortReceive</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_entity_abortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_usart_entity_abortReceive &rArr; fw_usart_abortReceive &rArr; fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>fw_usart_entity_abortSend</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_entity_abortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_usart_entity_abortSend &rArr; fw_usart_abortSend &rArr; fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>fw_usart_entity_reciver</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_entity_reciver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = fw_usart_entity_reciver &rArr; fw_usart_reciver &rArr; USART_TransferReceiveNonBlocking &rArr; USART_TransferGetRxRingBufferLength &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_reciver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>fw_usart_entity_send</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_entity_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = fw_usart_entity_send &rArr; fw_usart_send &rArr; USART_TransferSendNonBlocking &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>fw_usart_entity_setBaudrate</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_entity_setBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = fw_usart_entity_setBaudrate &rArr; fw_usart_setting_setBaudrate &rArr; USART_SetBaudRate &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_setBaudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>fw_usart_getEntity</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, fw_usart.o(i.fw_usart_getEntity))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fw_usart_getEntity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>fw_usart_getHandleMem</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fw_usart.o(i.fw_usart_getHandleMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fw_usart_getHandleMem &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_ringBufferEnable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_ringBufferDisable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_reciver
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortSend
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortReceive
</UL>

<P><STRONG><a name="[be]"></a>fw_usart_getHwConf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fw_usart.o(i.fw_usart_getHwConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_setBaudrate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_ringBufferEnable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setting_ringBufferDisable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setPin
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_reciver
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_deinit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortSend
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_abortReceive
</UL>

<P><STRONG><a name="[c0]"></a>fw_usart_getHwInfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fw_usart.o(i.fw_usart_getHwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fw_usart_getHwInfo &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setPin
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
</UL>

<P><STRONG><a name="[45]"></a>fw_usart_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fw_usart.o(i.fw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = fw_usart_init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_setPin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwInfo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>fw_usart_reciver</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_reciver))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = fw_usart_reciver &rArr; USART_TransferReceiveNonBlocking &rArr; USART_TransferGetRxRingBufferLength &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_entity_reciver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>fw_usart_send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = fw_usart_send &rArr; USART_TransferSendNonBlocking &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferSendNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_entity_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>fw_usart_setPin</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fw_usart.o(i.fw_usart_setPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fw_usart_setPin &rArr; SWM_SetMovablePinSelect &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwInfo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_chip_iocon_pinMuxSet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWM_SetMovablePinSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_init
</UL>

<P><STRONG><a name="[4e]"></a>fw_usart_setting_ringBufferDisable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_setting_ringBufferDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fw_usart_setting_ringBufferDisable &rArr; fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferStopRingBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>fw_usart_setting_ringBufferEnable</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_usart.o(i.fw_usart_setting_ringBufferEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = fw_usart_setting_ringBufferEnable &rArr; fw_usart_getHwConf &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHandleMem
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferStartRingBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>fw_usart_setting_setBaudrate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fw_usart.o(i.fw_usart_setting_setBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = fw_usart_setting_setBaudrate &rArr; USART_SetBaudRate &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_getHwConf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_usart_entity_setBaudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_usart.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>CLOCK_GetFRGInputClkFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFRGInputClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_GetFRGInputClkFreq &rArr; CLOCK_GetMainClkFreq &rArr; CLOCK_GetSystemPLLFreq &rArr; CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMainClkFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRG1ClkFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRG0ClkFreq
</UL>

<P><STRONG><a name="[9a]"></a>CLOCK_GetSystemPLLFreq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetSystemPLLFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetSystemPLLFreq &rArr; CLOCK_GetSystemPLLInClockRate &rArr; CLOCK_GetFroFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMainClkFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClkFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a2]"></a>CLOCK_UpdateClkSrc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_UpdateClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = CLOCK_UpdateClkSrc &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMainClkSrc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFroOutClkSrc
</UL>

<P><STRONG><a name="[ac]"></a>USART_EnableTx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_usart.o(i.USART_EnableTx))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferAbortSend
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b2]"></a>USART_TransferIsRxRingBufferFull</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_TransferIsRxRingBufferFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = USART_TransferIsRxRingBufferFull &rArr; USART_TransferGetRxRingBufferLength &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferHandleIRQ
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[91]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
